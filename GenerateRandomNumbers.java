import java.io.File;
import java.io.IOException;
import java.awt.Color;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.util.Scanner;

public class GenerateRandomNumbers {
	
	private static boolean endProgram = false;
	private static int userKey;
	private static int rangeMin;
	private static int rangeMax;
	private static int quantity;
	private static BufferedImage firstImage = null;
	private static BufferedImage secondImage = null;
	private static File imageAdress = null; 
	private static int width = 640;    //width of the image
    private static int height = 480;   //height of the image	
    
	public static void main(String[] args) {
		
		Scanner userNumbers = new Scanner(System.in);
			
		while(!endProgram) {
			
			//Path of first and second images are loaded into variables image1 and image2 respectively
			System.out.print("What is the name and file path of your first image? ");
			String image1 = userNumbers.nextLine();		
			System.out.print("What is the name and file path of your second image? ");
			String image2 = userNumbers.nextLine();		
			
			//The users key will be used to add entropy to the generator, it could also be used as a password to a sequence of numbers
			System.out.println("Enter a number: ");
			userKey = userNumbers.nextInt();
			
			//Establishing the upper and lower range of the generated numbers
			System.out.println("Enter the lowest value of your range: ");
			rangeMin = userNumbers.nextInt();
			System.out.println("Enter the max value of your range: ");
			rangeMax = userNumbers.nextInt() + 1;
			
			//Set quantity of numbers
			System.out.println("How many numbers would you like generated? ");
			quantity = userNumbers.nextInt();
			
		    //read first image	
			imageAdress = new File(image1);  //output file path
		    try{
		    	
		      firstImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
		      firstImage = ImageIO.read(imageAdress);
		      System.out.println("Reading complete.");
		    }catch(IOException e){
		      System.out.println("Error: "+e);
		    }
		    
		    //read 2nd image
			imageAdress = new File(image2);  //output file path
		    try{
		    	
		      secondImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
		      secondImage = ImageIO.read(imageAdress);
		      System.out.println("Reading complete.");
		    }catch(IOException e){
		      System.out.println("Error: "+e);
		    }
		    
		    //Generate numbers with the function
		    long[] generatedNumbers = generateNumbers();
		    
		    //Display numbers using while loop
		    int i = 0;
		    System.out.println("");
		    while(i < quantity) {
		    	System.out.print(generatedNumbers[i] + ", ");
		    	i++;
		    }
		    
		    //close program
		    userNumbers.close();
		    endProgram = true;
		}
			
	}		
	
	private static long[] generateNumbers() {
/*		Numbers are generated by comparing two pixels from two images corresponding to the same place.
		The difference in numbers is used to navigate to the next x,y location in the series.
		the difference is also used to make a random number.
*/
		int y = 0;
		int x= 0;
		long[] rawNumbers = new long[2];
		long[] randomNumbers = new long[quantity ];
		long number;
		int i = 0;
		int absoluteRange;
		
		absoluteRange = rangeMax - rangeMin;
		
		while(quantity > i) {
			
			if(x < 0) {
				x += width;
			}
			
			rawNumbers = comparePixels(x, y, i);
			
			x = (int) rawNumbers[0] % width;
			y = (int) rawNumbers[1] % height;
			
			System.out.println("(" + x + "," + y + ")");
			
			number = (rawNumbers[1] % absoluteRange) + rangeMin;
			randomNumbers[i] = number;
			
			i++;
		}
		
		return randomNumbers;
	}
	
	private static long[] comparePixels(int x, int y, int i) {
	
		long[] delta = new long[2];
		
		Color firstColor = new Color(firstImage.getRGB(x, y));
		Color secondColor = new Color(secondImage.getRGB(x, y));
		
		int red1 = firstColor.getRed();
		int red2 = secondColor.getRed();
		int blue1 = firstColor.getBlue();
		int blue2 = secondColor.getBlue();
		int green1 = firstColor.getGreen();
		int green2 = secondColor.getGreen();
		float[] HSB1 = firstColor.RGBtoHSB(red1, green1, blue1, null);
		float[] HSB2 = secondColor.RGBtoHSB(red2, green2, blue2, null);
		
		float huea = HSB1[0] * 100;
		float hueb = HSB2[0] * 100;
		float saturationa = HSB1[1] * 100;
		float saturationb = HSB2[1] * 100;
		float brightnessa = HSB1[2] * 100;
		float brightnessb = HSB2[2] * 100;
		
		int hue1 = (int) huea;
		int hue2 = (int) hueb;
		int saturation1 = (int) saturationa;
		int saturation2 = (int) saturationb;
		int brightness1 = (int) brightnessa;
		int brightness2 = (int) brightnessb;
		
		System.out.println(red1 + "," + red2 + "," + blue1 + "," + blue2 + "," + green1 + "," + "," + green2 + "/" + hue1 + "," + hue2 +"," + saturation1 + "," + saturation2 + "," + brightness1 + "," + brightness2);
		
		long deltaRGB = (userKey * ((red1 - red2)^4 + (blue1 - blue2)^4)) + (green1 - green2) + i;
		long deltaHSL = (userKey * ((hue1 - hue2)^4 + (saturation1 - saturation2)^4)) + (brightness1 - brightness2) + i;
		
		delta[0] = Math.abs(deltaHSL);
		delta[1] = Math.abs(deltaRGB);
		return delta;
	
	
	}
}
